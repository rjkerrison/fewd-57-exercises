/* Modal */

.overlay {
  position: fixed;
  top: 0;
  /* RJK
  This is such an interesting approach.
  I was expecting just a display: none;
  or visibility: hidden; solution.
  This one is cool because with just an
  additional transition property,
  I can animate the effect.
  */
  transition: all 1s ease-in-out;
  /* RJK

  This works for our site which is never wider than the screen,
  because the user can't scroll.
  If a user was able to scroll to the right
  due to an element that's wider than the screen,
  they'd see the overlay.

  You can replicate this even by setting position: absolute instead of fixed.

  Another way to keep it off the screen would be
  right: -100vw;
  because that's the size of the width.
  */
  left: 100vw;
  width: 100vw;
  height: 100vh;
  background-color: rgba(199, 189, 189, 0.7);
}

.modal {
  /* RJK
    You can make this relative to the overlay,
    that way changing the overlay changes everything,
    and you don't need to set:
    left: 100vw;

    You could even set
    left: 25vw;
    here so you only need to override .overlay properties in .lottery.
    This would also improve the animation I made; right now it looks odd because
    the modal moves back to left: 0.
    */
  position: relative;
  top: 30vh;
  width: 50vw;
  height: 40vh;
  background-color: var(--grey);
  border: 3px solid var(--green);
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: center;
}

.modal p {
  font-size: 1.5em;
  text-align: center;
}

.modal button {
  background-color: var(--green);
  color: var(--grey);
  border: none;
  width: 50%;
  display: block;
  padding: 10px 0;
}

.lottery .overlay {
  left: 0;
}

.lottery .modal {
  left: 25vw;
}

@media (max-width: 700px) {
  .lottery .modal {
    width: 80vw;
    height: 50vh;
    left: 10vw;
    top: 25vh;
  }
  .modal .button {
    width: 70%;
  }
}
